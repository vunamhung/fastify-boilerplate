import { FastifyInstance } from 'fastify';
import { isEmpty } from 'ramda';
import { uid } from 'rand-token';
import jwt from 'jsonwebtoken';
import User from '../../models/User';
import { iBody, validatePassword } from '../../utilities';

export default function (server: FastifyInstance, options, done) {
  server.post(
    '/reset',
    {
      schema: {
        tags: ['auth'],
        description: 'Reset forgotten user password. An autogenerated password will be sent to the supplied email address.',
        summary: 'Reset user password',
        body: {
          type: 'object',
          properties: {
            password: { type: 'string' },
            email: { type: 'string', format: 'email' },
            id: { type: 'string' },
          },
          required: ['password', 'email', 'id'],
        },
        response: {
          200: {
            description: 'Password changed successfully',
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              message: { type: 'string' },
            },
          },
        },
      },
    },
    async ({ body }, reply) => {
      const { password, email, id } = body as iBody;

      try {
        let user = await User.findOne({ email });
        if (!user || !user.resetPasswordToken) return reply.badRequest('Token expired!');
        if (user.banned) reply.notAcceptable('You banned!');

        // @ts-ignore
        const { jti } = await jwt.verify(user.resetPasswordToken, process.env.RESET_PASSWORD_TOKEN_SECRET);
        if (id !== jti) reply.badRequest('Token Expired!');

        const invalidPasswordMessage = await validatePassword(password);

        if (!isEmpty(invalidPasswordMessage)) {
          reply.code(400).send({ statusCode: 400, error: 'Bad Request', message: invalidPasswordMessage });
          return;
        }

        user.password = password;
        user.resetPasswordToken = undefined;
        user.refreshToken = jwt.sign({}, process.env.REFRESH_TOKEN_SECRET, { expiresIn: '7d', jwtid: uid(8) });
        await user.save();

        reply.send({ success: true, message: 'Password changed successfully. Please login with your new password.' });
      } catch ({ message }) {
        reply.badRequest(message);
      }
    },
  );

  done();
}
